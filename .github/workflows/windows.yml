name: Windows
on: 
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/macos.yml'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/macos.yml'

env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18599/w_BaseKit_p_2022.1.3.210_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18578/w_HPCKit_p_2022.1.3.145_offline.exe
  WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-compiler
  WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.dpcpp-compiler

jobs:
  win32-msvc:
    runs-on: windows-latest
    strategy:
      matrix:
        qt_ver: [5.15.2, 6.3.0]
        qt_target: [desktop]
        qt_arch: [win64_msvc2019_64]
        msvc_arch: [x64]
        qt_arch_install: [msvc2019_64]
        include:
          - qt_ver: 5.15.2
            qt_modules: qtmultimedia
          - qt_ver: 6.3.0
            qt_modules: "qtmultimedia qt5compat"
    env:
      targetName: q5Go
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1  # not v2!
        with:
          path: ../Qt
          key: ${{ matrix.qt_arch }}-$${{ matrix.qt_ver }}-QtCache
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          aqtversion: '>=2.1.0'
          modules: ${{ matrix.qt_modules }}
          
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref  }}
          submodules: true

      - name: Set up jom
        shell: cmd
        run: |
          mkdir jom
          cd jom
          curl.exe -o jom.zip -L https://download.qt.io/official_releases/jom/jom_1_1_3.zip
          if exist jom.zip 7z.exe x jom.zip
          cd ..

      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          set PATH=%CD%\jom;%PATH%
          mkdir build
          cd build
          qmake -r CONFIG+=release CONFIG+=qtquickcompiler ..\q5go.pro
          if exist %CD%\jom\jom.exe jom.exe -j %NUMBER_OF_PROCESSORS%
          if not exist %CD%\jom\jom.exe nmake
          cd ..
      - name: package
        env:
          archiveName: ${{ env.targetName }}-${{ matrix.qt_arch }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory ${env:archiveName}
          Copy-Item build\src\Release\${env:targetName}'.exe' ${env:archiveName}\
          windeployqt --qmldir . ${env:archiveName}\${env:targetName}'.exe'
          Compress-Archive -Path ${env:archiveName} ${env:archiveName}'.zip'
          $name = ${env:archiveName}
          Write-Host 'packageName:'${env:packageName}

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ env.targetName }}-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}
          path: ${{ env.targetName }}-${{ matrix.qt_arch }}

      - name: queryReleaseWin
        id: queryReleaseWin
        if: startsWith(github.event.ref, 'refs/tags/')
        shell: pwsh
        env:
          githubFullName: ${{ github.event.repository.full_name }}
          ref: ${{ github.event.ref }}
        run: |
          [string]$tag = ${env:ref}.Substring(${env:ref}.LastIndexOf('/') + 1)
          [string]$url = 'https://api.github.com/repos/' + ${env:githubFullName} + '/releases/tags/' + ${tag}
          $response={}
          try {
            $response = Invoke-RestMethod -Uri $url -Method Get
          } catch {
            Write-Host "StatusCode:" $_.Exception.Response.StatusCode.value__ 
            Write-Host "StatusDescription:" $_.Exception.Response.StatusDescription
            echo "::set-output name=needCreateRelease::true"  
            return
          }
          [string]$latestUpUrl = $response.upload_url
          Write-Host 'latestUpUrl:'$latestUpUrl
          if ($latestUpUrl.Length -eq 0) {
            echo "::set-output name=needCreateRelease::true"  
          }
      - name: createReleaseWin
        id: createReleaseWin
        if: startsWith(github.event.ref, 'refs/tags/') && steps.queryReleaseWin.outputs.needCreateRelease == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1.0.0
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      - name: getLatestTagRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        shell: pwsh
        env:
          githubFullName: ${{ github.event.repository.full_name }}
          upUrl: ${{ steps.createReleaseWin.outputs.upload_url }}
          ref: ${{ github.event.ref }}
        run: |
          if (${env:upUrl}.Length -gt 0) {
              $v=${env:upUrl}
              return
          } 
          [string]$tag = ${env:ref}.Substring(${env:ref}.LastIndexOf('/') + 1)
          [string]$url = 'https://api.github.com/repos/' + ${env:githubFullName} + '/releases/tags/' + ${tag}
          $response = Invoke-RestMethod -Uri $url -Method Get
          [string]$latestUpUrl = $response.upload_url
          Write-Host 'latestUpUrl:'$latestUpUrl
          Write-Host 'env uploadUrl:'${env:uploadUrl}
      - name: uploadRelease
        id: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ env.uploadUrl }}
          asset_path: ./${{ env.packageName }}.zip
          asset_name: ${{ env.packageName }}.zip
          asset_content_type: application/zip
  win32-msvc-clang:
    runs-on: windows-latest
    strategy:
      matrix:
        qt_ver: [5.15.2, 6.3.0]
        qt_target: [desktop]
        qt_arch: [win64_msvc2019_64]
        msvc_arch: [x64]
        qt_arch_install: [msvc2019_64]
        clang_link: llvm-win-x64.7z
        include:
          - qt_ver: 5.15.2
            qt_modules: qtmultimedia
          - qt_ver: 6.3.0
            qt_modules: "qtmultimedia qt5compat"
    env:
      targetName: q5Go
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1  # not v2!
        with:
          path: ../Qt
          key: ${{ matrix.qt_arch }}-$${{ matrix.qt_ver }}-QtCache
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          aqtversion: '>=2.1.0'
          modules: $${{ matrix.qt_modules }}
          
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref  }}
          submodules: true

      - name: Set up clang for Windows
        shell: cmd
        run: |
          mkdir llvm
          cd llvm
          curl.exe -o LLVM.7z -L ${{ secrets.CLANG_SERVER }}/${{ matrix.clang_link }}
          7z.exe x LLVM.7z
          cd ..
      
      - name: Set up jom
        shell: cmd
        run: |
          mkdir jom
          cd jom
          curl.exe -o jom.zip -L https://download.qt.io/official_releases/jom/jom_1_1_3.zip
          if exist jom.zip 7z.exe x jom.zip
          cd ..

      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          set PATH=%CD%\llvm\;%CD%\jom;%PATH%
          mkdir build
          cd build
          qmake -r -spec win32-clang-msvc CONFIG+=release CONFIG+=qtquickcompiler ..\q5go.pro
          if exist %CD%\jom\jom.exe jom.exe -j %NUMBER_OF_PROCESSORS%
          if not exist %CD%\jom\jom.exe nmake
          cd ..
      - name: package
        env:
          archiveName: ${{ env.targetName }}-${{ matrix.qt_arch }}-clang
        shell: pwsh
        run: |
          New-Item -ItemType Directory ${env:archiveName}
          Copy-Item build\src\Release\${env:targetName}'.exe' ${env:archiveName}\
          windeployqt --qmldir . ${env:archiveName}\${env:targetName}'.exe'
          Compress-Archive -Path ${env:archiveName} ${env:archiveName}'.zip'
          $name = ${env:archiveName}
          Write-Host 'packageName:'${env:packageName}

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ env.targetName }}-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}-clang
          path: ${{ env.targetName }}-${{ matrix.qt_arch }}-clang
  
  win32-msvc-intel:
    runs-on: windows-latest
    strategy:
      matrix:
        qt_ver: [5.15.2, 6.3.0]
        qt_target: [desktop]
        qt_arch: [win64_msvc2019_64]
        msvc_arch: [x64]
        qt_arch_install: [msvc2019_64]
        include:
          - qt_ver: 5.15.2
            qt_modules: qtmultimedia
          - qt_ver: 6.3.0
            qt_modules: "qtmultimedia qt5compat"
    env:
      targetName: q5Go
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1  # not v2!
        with:
          path: ../Qt
          key: ${{ matrix.qt_arch }}-$${{ matrix.qt_ver }}-QtCache
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          aqtversion: '>=2.1.0'
          modules: $${{ matrix.qt_modules }}

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref  }}
          submodules: true

      - name: cache install
        id: cache-install
        uses: actions/cache@v2
        with:
          path: |
              C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat
              C:\Program Files (x86)\Intel\oneAPI\compiler
          key: install-${{ env.CACHE_NUMBER }}-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_CPP_COMPONENTS }}-compiler-${{ hashFiles('**/scripts/cache_exclude_windows.sh') }}

      - name: install
        if: steps.cache-install.outputs.cache-hit != 'true'
        run: |
          git clone --depth=1 https://github.com/oneapi-src/oneapi-ci.git oneapi-ci
          cd oneapi-ci
          scripts/install_windows.bat ${{ env.WINDOWS_HPCKIT_URL }} ${{ env.WINDOWS_CPP_COMPONENTS }}

      - name: Set up jom
        shell: cmd
        run: |
          mkdir jom
          cd jom
          curl.exe -o jom.zip -L https://download.qt.io/official_releases/jom/jom_1_1_3.zip
          if exist jom.zip 7z.exe x jom.zip
          cd ..

      - name: build-msvc-intel
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          call "C:\Program Files (x86)\Intel\oneAPI\compiler\2022.0.3\env\vars.bat"
          set PATH="C:\Program Files (x86)\Intel\oneAPI\compiler\2022.0.3\windows\bin-llvm\";%CD%\jom;%PATH%
          mkdir build
          cd build
          qmake -r -spec win32-clang-msvc CONFIG+=release CONFIG+=qtquickcompiler ..\q5go.pro
          if exist %CD%\jom\jom.exe jom.exe -j %NUMBER_OF_PROCESSORS%
          if not exist %CD%\jom\jom.exe nmake
          cd ..
      - name: package
        env:
          archiveName: ${{ env.targetName }}-${{ matrix.qt_arch }}-intel
        shell: pwsh
        run: |
          New-Item -ItemType Directory ${env:archiveName}
          Copy-Item build\src\Release\${env:targetName}'.exe' ${env:archiveName}\
          windeployqt --qmldir . ${env:archiveName}\${env:targetName}'.exe'
          Copy-Item 'C:\Program Files (x86)\Intel\oneAPI\compiler\2022.0.3\windows\redist\intel64_win\compiler\libmmd.dll' ${env:archiveName}\
          Compress-Archive -Path ${env:archiveName} ${env:archiveName}'.zip'
          $name = ${env:archiveName}
          Write-Host 'packageName:'${env:packageName}

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ env.targetName }}-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}-intel
          path: ${{ env.targetName }}-${{ matrix.qt_arch }}-intel

  win32-mingw:
    runs-on: windows-latest
    strategy:
      matrix:
        qt_arch: [mingw64_qt5-gcc, mingw64_qt5-static-gcc, mingw64_qt5-clang, mingw64_qt6-gcc, mingw64_qt6-clang]
        include:
          - qt_arch: mingw64_qt5-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            mkspec: win32-g++
            qt_build: qt5
            qmake: qmake.exe
            windeployqt: windeployqt.exe
          - qt_arch: mingw64_qt5-static-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            mkspec: win32-g++
            qt_build: qt5-static
            qmake: /mingw64/qt5-static/bin/qmake.exe
            windeployqt: ls.exe
          - qt_arch: mingw64_qt5-clang
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: clang
            mkspec: win32-clang-g++
            qt_build: qt5
            qmake: qmake.exe
            windeployqt: windeployqt.exe
          - qt_arch: mingw64_qt6-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            mkspec: win32-g++
            qt_build: qt6
            qmake: qmake6.exe
            windeployqt: windeployqt.exe
          - qt_arch: mingw64_qt6-clang
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: clang
            mkspec: win32-clang-g++
            qt_build: qt6
            qmake: qmake6.exe
            windeployqt: windeployqt.exe
    env:
      targetName: q5Go
      
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install:  ${{ matrix.mingw_prefix }}-${{ matrix.toolchains }} ${{ matrix.mingw_prefix }}-make ${{ matrix.mingw_prefix }}-${{ matrix.qt_build }} ${{ matrix.mingw_prefix }}-openssl ${{ matrix.mingw_prefix }}-zstd

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref  }}
          submodules: true

      - name: qmake
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          ${{ matrix.qmake }} -r -spec ${{ matrix.mkspec }} CONFIG+=release CONFIG+=qtquickcompiler ..
          cd ..

      - name: mingw32-make
        shell: msys2 {0}
        run: |
          cd build
          mingw32-make.exe -j $NUMBER_OF_PROCESSORS
          cd ..

      - name: extract executable
        env:
          archiveName: ${{ env.targetName }}-${{ matrix.qt_arch }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory ${env:archiveName}
          Copy-Item build\src\release\${env:targetName}'.exe' ${env:archiveName}\
   
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ env.targetName }}-${{ matrix.qt_arch }}
          path: ${{ env.targetName }}-${{ matrix.qt_arch }}